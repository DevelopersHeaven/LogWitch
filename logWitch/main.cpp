#include "logfileanalyser.h"

#include <iostream>

#include <QtGui>
#include <QApplication>
#include <QCommandLineParser>

#include "LogData/LogDataTypeRegistration.h"
#include "Types.h"

// This file is generated by the build system and will hold the version and some other things.
#include "BuildIfos.h"


int main(int argc, char *argv[])
{
#ifndef NDEBUG
  qDebug() << "WARNING: Running with debug compile options. Performance may be lower.";
#endif
  qRegisterMetaType<TSharedConstQString>("TSharedConstQString");

  registerLogDataTypes();


  QCoreApplication::setOrganizationName("Steckmann");
  QCoreApplication::setOrganizationDomain("steckmann.de");
  QCoreApplication::setApplicationName( globals::applicationName );
  QCoreApplication::setApplicationVersion( globals::applicationVersion );

  QApplication a(argc, argv);
  LogfileAnalyser w;

  QCommandLineParser parser;
  parser.setApplicationDescription(QCoreApplication::translate("main", "This is a tool for analyzing logfiles or capturing remote log data.") );
  parser.addHelpOption();
  parser.addVersionOption();

  // An option with a value
  parser.addPositionalArgument("logfile", QCoreApplication::translate("main", "File to open"));

  parser.process(a);
  const QStringList positionalArguments = parser.positionalArguments();
  if (!positionalArguments.isEmpty())
  {
    // Request to open logfile ...
    qDebug() << " Request to open logfile: " <<positionalArguments;
    w.openLogfile(positionalArguments.at(0));
  }

  const QString mainWindowGeometry_Identifier( "MainWindowGeometry" );

  {
    QSettings settings;
    if( settings.contains( mainWindowGeometry_Identifier) )
      w.restoreGeometry( settings.value( mainWindowGeometry_Identifier).toByteArray() );

    w.setWindowTitle( globals::applicationName + " " + globals::applicationVersion );
  }

  w.show();
  int returnValue = a.exec();

  // Save window geometry
  {
    QSettings settings;
    settings.setValue( mainWindowGeometry_Identifier, w.saveGeometry() );
  }

  return returnValue;
}
